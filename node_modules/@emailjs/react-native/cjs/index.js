"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailJSResponseStatus = exports.sendForm = exports.send = exports.init = void 0;
const browser_1 = require("@emailjs/browser");
Object.defineProperty(exports, "EmailJSResponseStatus", { enumerable: true, get: function () { return browser_1.EmailJSResponseStatus; } });
const createReactNativeStorage_1 = require("./utils/createReactNativeStorage/createReactNativeStorage");
const createLocation_1 = require("./utils/createLocation/createLocation");
/**
 * EmailJS global SDK config
 * @param {object} options - the EmailJS global SDK config options
 * @param {string} origin - the non-default EmailJS origin
 */
const init = (options, origin) => {
    return (0, browser_1.init)({
        storageProvider: (0, createReactNativeStorage_1.createReactNativeStorage)(),
        ...options,
    }, origin);
};
exports.init = init;
/**
 * Send a template to the specific EmailJS service
 * @param {string} serviceID - the EmailJS service ID
 * @param {string} templateID - the EmailJS template ID
 * @param {object} templateParams - the template params, what will be set to the EmailJS template
 * @param {object} options - the EmailJS SDK config options
 * @returns {Promise<EmailJSResponseStatus>}
 */
const send = async (serviceID, templateID, templateParams, options) => {
    (0, createLocation_1.createLocation)();
    return (0, browser_1.send)(serviceID, templateID, templateParams, {
        storageProvider: (0, createReactNativeStorage_1.createReactNativeStorage)(),
        ...options,
    });
};
exports.send = send;
/**
 * Send a form the specific EmailJS service
 * @param {string} serviceID - the EmailJS service ID
 * @param {string} templateID - the EmailJS template ID
 * @param {string | HTMLFormElement} form - the form element or selector
 * @param {object} options - the EmailJS SDK config options
 * @returns {Promise<EmailJSResponseStatus>}
 */
const sendForm = async (serviceID, templateID, form, options) => {
    (0, createLocation_1.createLocation)();
    return (0, browser_1.sendForm)(serviceID, templateID, form, {
        storageProvider: (0, createReactNativeStorage_1.createReactNativeStorage)(),
        ...options,
    });
};
exports.sendForm = sendForm;
exports.default = {
    init,
    send,
    sendForm,
    EmailJSResponseStatus: browser_1.EmailJSResponseStatus,
};
