import { type StorageProvider, EmailJSResponseStatus } from '@emailjs/browser';
import type { Options } from '@emailjs/browser/es/types/Options';
/**
 * EmailJS global SDK config
 * @param {object} options - the EmailJS global SDK config options
 * @param {string} origin - the non-default EmailJS origin
 */
declare const init: (options: Options, origin?: string) => void;
/**
 * Send a template to the specific EmailJS service
 * @param {string} serviceID - the EmailJS service ID
 * @param {string} templateID - the EmailJS template ID
 * @param {object} templateParams - the template params, what will be set to the EmailJS template
 * @param {object} options - the EmailJS SDK config options
 * @returns {Promise<EmailJSResponseStatus>}
 */
declare const send: (serviceID: string, templateID: string, templateParams?: Record<string, unknown>, options?: Options) => Promise<EmailJSResponseStatus>;
/**
 * Send a form the specific EmailJS service
 * @param {string} serviceID - the EmailJS service ID
 * @param {string} templateID - the EmailJS template ID
 * @param {string | HTMLFormElement} form - the form element or selector
 * @param {object} options - the EmailJS SDK config options
 * @returns {Promise<EmailJSResponseStatus>}
 */
declare const sendForm: (serviceID: string, templateID: string, form: string | HTMLFormElement, options?: Options) => Promise<EmailJSResponseStatus>;
export type { StorageProvider };
export { init, send, sendForm, EmailJSResponseStatus };
declare const _default: {
    init: (options: Options, origin?: string | undefined) => void;
    send: (serviceID: string, templateID: string, templateParams?: Record<string, unknown> | undefined, options?: Options | undefined) => Promise<EmailJSResponseStatus>;
    sendForm: (serviceID: string, templateID: string, form: string | HTMLFormElement, options?: Options | undefined) => Promise<EmailJSResponseStatus>;
    EmailJSResponseStatus: typeof EmailJSResponseStatus;
};
export default _default;
